name: CD process for backend demo app

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]
    branches:
      - master

jobs:
  ci-test:
    name: Unit tests and CodeCoverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.X'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install 'coverage[toml]' pytest pytest-cov juniper
          pip install -r requirements/prod.txt
      - name: Run Unit Tests
        run: |
           python -m pytest src/tests
      - name: Generate coverage
        run: |
          python -m pytest --cache-clear --cov-config=.coveragerc --cov=src/ src/tests/* > pytest-coverage.txt
      - name: Generate coverage comment
        uses: coroo/pytest-coverage-commentator@v1.0.2
        with:
          pytest-coverage: pytest-coverage.txt
      - name: Check threshold of coverage
        run: |
          coverage report -m --fail-under=100
      - name: Build lambdas
        run: |
          juni build
      - name: Listing lambdas
        run: |
          ls dist
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        id: init
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infrastructure
          terraform init -backend-config="access_key=$TF_VAR_aws_access_key_id" -backend-config="secret_key=$TF_VAR_aws_secret_access_key"
      - name: Terraform Select Prod Workspace
        id: workspace-prod
        run: |
          cd infrastructure
          terraform workspace select prod
      - name: Terraform Validate Prod Env
        id: validate-prod
        run: |
          cd infrastructure
          terraform validate -no-color
      - name: Terraform Plan Prod Env
        id: plan-prod
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_git_token: ${{ secrets.CODEBUILD_TOKEN }}
        run: |
          cd infrastructure
          terraform plan -no-color
        continue-on-error: true
      - name: Update Pull Request for Prod Env
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan for Prod</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status for Prod Env
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Select Demo Workspace
        id: workspace
        run: |
          cd infrastructure
          terraform workspace select demo
      - name: Terraform Validate
        id: validate
        run: |
          cd infrastructure
          terraform validate -no-color
      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_git_token: ${{ secrets.CODEBUILD_TOKEN }}
        run: |
          cd infrastructure
          terraform plan -no-color
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_git_token: ${{ secrets.CODEBUILD_TOKEN }}
        run: |
          cd infrastructure
          terraform apply -auto-approve
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Run CodeBuild
        id: codebuild-demo
        uses: aws-actions/aws-codebuild-run-build@v1
        with:
          project-name: ${{ secrets.CODEBUILD_DEMO_PROJECT_NAME }}
      - name: CodeBuild Build ID
        run: echo "Build ID ${{ steps.codebuild-demo.outputs.aws-build-id }}"
