name: CD process to deploy to backend service

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.X'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install 'coverage[toml]' pytest pytest-cov juniper
          pip install -r requirements/envs/prod.txt
      - name: Run Unit Tests
        run: |
           python -m pytest src/tests
      - name: Generate coverage
        run: |
          python -m pytest --cache-clear --cov-config=.coveragerc --cov=src/ src/tests/*
      - name: Check threshold of coverage
        run: |
          coverage report -m --fail-under=100
      - name: Build lambdas
        run: |
          juni build
      - name: Listing lambdas
        run: |
          ls dist
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform Init
        id: init
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infrastructure
          terraform init -backend-config="access_key=$TF_VAR_aws_access_key_id" -backend-config="secret_key=$TF_VAR_aws_secret_access_key"
      - name: Terraform Select Workspace
        id: workspace
        run: |
          cd infrastructure
          terraform workspace select prod
      - name: Terraform Validate
        id: validate
        run: |
          cd infrastructure
          terraform validate -no-color
      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_prod_password: ${{ secrets.DB_PROD_PASSWORD }}
          TF_VAR_db_demo_password: ${{ secrets.DB_DEMO_PASSWORD }}
          TF_VAR_git_token: ${{ secrets.CODEBUILD_TOKEN }}
        run: |
          cd infrastructure
          terraform plan -no-color
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_prod_password: ${{ secrets.DB_PROD_PASSWORD }}
          TF_VAR_db_demo_password: ${{ secrets.DB_DEMO_PASSWORD }}
          TF_VAR_git_token: ${{ secrets.CODEBUILD_TOKEN }}
        run: |
          cd infrastructure
          terraform apply -auto-approve
      - name: Get Terraform outputs
        id: tf-outputs
        run: |
          cd infrastructure
          outputCodebuildProjectName=$(terraform output -raw codebuild_project_name)
          outputRegion=$(terraform output -raw region)
          echo "::set-output name=codebuild_project_name::$outputCodebuildProjectName"
          echo "::set-output name=region::$outputRegion"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ steps.tf-outputs.outputs.region }}
      - name: Run CodeBuild
        id: codebuild-prod
        uses: aws-actions/aws-codebuild-run-build@v1
        with:
          project-name: ${{ steps.tf-outputs.outputs.codebuild_project_name }}
      - name: CodeBuild Build ID
        run: echo "Build ID ${{ steps.codebuild-prod.outputs.aws-build-id }}"